<div class="table-responsive">
    <table class="table table-striped">
        <thead class="thead-light">
            <tr>
                <th>Name</th>
                <th>Genre</th>
                <th>Release date</th>
                <th>
                    <input type="checkbox" @bind="displayButtons" />
                </th>
            </tr>
        </thead>
        <tbody>
            <GenericList ListOfItems="Games">
                <ItemTemplate Context="game">
                    <IndividualGame Game="game" DeleteGame="DeleteTheGame" DisplayButtons="displayButtons" IsTable="true"></IndividualGame>
                </ItemTemplate>
            </GenericList>
        </tbody>
    </table>
</div>

@code
{
    [Parameter] public List<Game> Games { get; set; }

    private bool displayButtons = false;

    private void DeleteTheGame(Game game)
    {
        Games.Remove(game);
    }
    public GameListTable()
    {

    }
    //------------//

    /// <summary>
    /// Метод срабатывает до рендеринга страницы
    /// </summary>
    protected override void OnInitialized()
    {
        Console.WriteLine($"1. OnInitialized(). Games count: {Games?.Count}");
    }

    /// <summary>
    /// Метод вызывается после инициализации и/или после инициализации параметра
    /// </summary>
    protected override void OnParametersSet()
    {
        Console.WriteLine($"2. OnParametersSet(). Games count: {Games?.Count}");
    }

    /// <summary>
    /// Метод даёт/запрещает возможность повторной перерисовки компонента
    /// </summary>
    /// <returns></returns>
    protected override bool ShouldRender()
    {
        Console.WriteLine($"3. ShouldRender(). Should render: {base.ShouldRender()}");
        return base.ShouldRender();
    }

    /// <summary>
    /// Метод срабатывет после рендеринга
    /// </summary>
    /// <param name="firstRender"></param>
    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine($"4. OnAfterRender(bool firstRender). First render: {firstRender}");
    }


}
